This is the built-in Frescobaldi manual

This manual consists of simple markdown-like formatted text files, one per
help topic.

The text pages support some basic markdown features, see the documentation in
the simplemarkdown module.

Every block of inline text is first formatted into HTML, then translated.
There are some special features.

If an inline block of text (i.e. a paragraph or a list item) starts with !, it
is not translated. In that case, parts between _( and )_ are harvested and
translated on their own.

E.g.

    !`-dno-point-and-click`: _(No point and click)_

is internally converted to 

    "<code>-dno-point-and-click</code>: {0}".format(_("No point and click"))

It is also possible to embed variables in the text. Those always adhere to the
python format string syntax.

In the markdown help page you could write:

    See {link}
    
The {link} construct is put unchanged in the translatable string, the
translaters know that those are not meant to be translated.

The value is looked up as follows:

1. Look in the #VARS section below the document content

2. Call the method with that name in a special module, the returned value is
   inserted in the string before display
   


The #VARS section
==================

Here you can list variables that are referred to in the translatable markdown
text blocks. Each variable is on one line:

    name type content ...

e.g. when using:

    See {link}.

    #VARS
    link URL http://www.frescobaldi.org/
    
"See {link}." will be transformed like:
    
    _("See {link}.").format(
        link='<a href="http://www.frescobaldi.org/">www.frescobaldi.org</a>')



